pipeline {
    agent any
    tools {
        nodejs 'NodeJS 24.0.2' 
    }
    environment {
        CI = 'true'
        APP_NAME = "practical-node-app"
        DOCKER_REGISTRY = "namgyelhuk708" // 
        DOCKER_CREDENTIALS_ID = "docker-credentials" 
    }
    
    stages {
        // Existing stages from Practical 4
        stage('Checkout') {
            steps { checkout scm }
        }
        
        stage('Install') {
            steps { sh 'npm ci' }
        }
        
        stage('Test') {
            steps { sh 'npm run test:ci' }
            post {
                always {
                    junit 'junit.xml'
                    archiveArtifacts artifacts: 'coverage/**/*'
                }
            }
        }
        
        // New stages for Practical 6
        stage('Docker Build') {
            steps {
                script {
                    dockerImage = docker.build("${DOCKER_REGISTRY}/${APP_NAME}:${BUILD_NUMBER}")
                }
            }
        }
        
        stage('Docker Push') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS_ID) {
                        dockerImage.push()
                        if (env.BRANCH_NAME == 'main') {
                            dockerImage.push('latest')
                        }
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'main') {
                        sh 'echo "Production deployment triggered for ${DOCKER_REGISTRY}/${APP_NAME}:${BUILD_NUMBER}"'
                    } else {
                        sh 'echo "Staging deployment triggered for ${DOCKER_REGISTRY}/${APP_NAME}:${BUILD_NUMBER}"'
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh 'docker system prune -f' // Cleanup
            cleanWs() // Clean workspace
        }
    }
}